package repositories

import scala.concurrent.{Await, Future}
import scala.concurrent.duration._
import java.util.UUID
import org.specs2.Specification
import org.specs2.concurrent.ExecutionEnv
import org.specs2.matcher.FutureMatchers

import utils.AppSpec

import controllers.ReportController
import models._
import repositories._

class ProWorkflowSpec extends Specification with AppSpec with FutureMatchers {
  lazy val userRepository = injector.instanceOf[UserRepository]
  lazy val companyRepository = injector.instanceOf[CompanyRepository]

  val newCompany = Company(
    UUID.randomUUID(), "123456789", OffsetDateTime.now(),
    "Test", "42 rue du Test", Some("37500")
  )

  def makeReport(company: Company) = {
    Await.result(
      application.injector.instanceOf[ReportController].createReport
        .apply(FakeRequest().withBody(Json.toJson(_))),
      Duration.Inf)
  }
  def checkActivationLetter(company: Company) = {

  }
  def activateAccount(company: Company) = {

  }
  def checkReportAccess() = {

  }
}

object ReportNewCompanySpec extends ProWorkflowSpec {

  override def setupData() {
    Await.result(userRepository.create(userToto), Duration.Inf)
    Unit
  }
  
  def is = s2"""

    I am a professional
        Given a report concerning my company                    $makeReport(newCompany)
        I should have received a letter with a token            $checkActivationLetter(newCompany)
        When I create an account with the token                 $activateAccount(newCompany)
        I should have access to the report                      $checkReportAccess()
                                                                 """
}
